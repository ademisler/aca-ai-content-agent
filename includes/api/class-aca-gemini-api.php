<?php
/**
 * ACA - AI Content Agent
 *
 * Gemini API Client
 *
 * @package ACA_AI_Content_Agent
 * @version 1.3
 * @since   1.3
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Google Gemini API client for content generation.
 *
 * Handles all communication with the Google Gemini API, including
 * content generation, keyword extraction, and error handling.
 *
 * @since 1.2.0
 */
class ACA_Gemini_Api {

    /**
     * Central function to communicate with the Google Gemini API.
     *
     * This function handles all API requests, including error handling,
     * secure key management, and response validation.
     *
     * @since 1.2.0
     * @param string $prompt The main prompt or question for the API.
     * @param string $system_instruction Optional. A system-level instruction for the API (e.g., a style guide).
     * @param array $api_args Optional. Arguments to override default API parameters (e.g., temperature, max_tokens).
     * @return string|WP_Error The content generated by the API on success, or a WP_Error object on failure.
     */
    public static function call( $prompt, $system_instruction = '', $api_args = [] ) {
        // Check if developer mode is enabled (with production safety filter)
        $dev_mode_enabled = defined('ACA_AI_CONTENT_AGENT_DEV_MODE') && ACA_AI_CONTENT_AGENT_DEV_MODE;
        $dev_mode_enabled = apply_filters('aca_ai_content_agent_dev_mode_enabled', $dev_mode_enabled);
        
        if ($dev_mode_enabled) {
            if (class_exists('ACA_Log_Service')) {
                ACA_Log_Service::add('Developer mode active: returning mock Gemini API response.', 'info');
            }
            return 'This is a mock Gemini API response (developer mode).';
        }
        
        $options = get_option('aca_ai_content_agent_options');
        
        // SECURITY FIX: Comprehensive rate limiting system
        $rate_limit_check = self::check_rate_limits($options);
        if (is_wp_error($rate_limit_check)) {
            return $rate_limit_check;
        }

        $api_key_encrypted = get_option( 'aca_ai_content_agent_gemini_api_key' );
        $api_key = ! empty( $api_key_encrypted ) ? ACA_Encryption_Util::decrypt( $api_key_encrypted ) : '';

        if ( empty( $api_key ) ) {
            return new WP_Error( 'api_key_missing', __( 'Google Gemini API key is missing or invalid. Please check your settings.', 'aca-ai-content-agent' ) );
        }

        // SECURITY FIX: Move API key to headers instead of URL
        $api_url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

        $contents = [
            [
                'role' => 'user',
                'parts' => [
                    ['text' => $prompt]
                ]
            ]
        ];

        // Default payload structure for Gemini API
        $payload = [
            'contents' => $contents,
            'generationConfig' => [
                'temperature' => 0.7,
                'topK' => 40,
                'topP' => 0.95,
                'maxOutputTokens' => 2048,
            ],
            'safetySettings' => [
                [
                    'category' => 'HARM_CATEGORY_HARASSMENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_HATE_SPEECH',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ]
            ]
        ];

        // Merge custom API arguments
        if (!empty($api_args)) {
            $payload = array_merge_recursive($payload, $api_args);
        }

        $request_args = [
            'method' => 'POST',
            'timeout' => 30,
            'headers' => [
                'Content-Type' => 'application/json',
                'Authorization' => 'Bearer ' . $api_key,
            ],
            'body' => wp_json_encode($payload),
        ];

        // ERROR RECOVERY: Use retry mechanism for API calls
        $response = ACA_Error_Recovery::retry_with_backoff(function() use ($api_url, $request_args) {
            return wp_remote_post($api_url, $request_args);
        }, [], 3);

        if ( is_wp_error( $response ) ) {
            // Returns the WP_Error from the HTTP request itself.
            return ACA_Error_Recovery::handle_api_error($response, 'Gemini API call');
        }

        $response_code = wp_remote_retrieve_response_code( $response );
        $response_body = wp_remote_retrieve_body( $response );
        $data = json_decode( $response_body, true );

        if ( $response_code !== 200 ) {
            $error_message = isset($data['error']['message']) ? $data['error']['message'] : __( 'An unknown API error occurred.', 'aca-ai-content-agent' );
            /* translators: 1: HTTP status code, 2: API error message */
            $error = new WP_Error( 'api_error', sprintf( __( 'API request failed with status code %1$d: %2$s', 'aca-ai-content-agent' ), $response_code, $error_message ), [ 'status' => $response_code ] );
            return ACA_Error_Recovery::handle_api_error($error, 'Gemini API call');
        }

        // SECURITY FIX: Update all rate limiting counters on successful call
        self::update_rate_limit_counters();

        // Robust guard for malformed or error data
        if (is_wp_error($data)) {
            return $data;
        }
        if (!isset($data['candidates'][0]['content']['parts'][0]['text'])) {
            return new WP_Error('invalid_response', __('The API response did not contain the expected content format.', 'aca-ai-content-agent'));
        }
        $text = $data['candidates'][0]['content']['parts'][0]['text'];
        if (is_wp_error($text) || !is_string($text)) {
            return new WP_Error('invalid_text', __('The API response text is not a string.', 'aca-ai-content-agent'));
        }
        return $text;
    }

    /**
     * Safely get the text from a Gemini API response, or return an empty string if WP_Error.
     *
     * @param string|WP_Error $response
     * @return string
     */
    public static function get_text_or_empty($response) {
        if (is_wp_error($response)) {
            return '';
        }
        return (string)$response;
    }

    /**
     * Check all rate limits before making API call.
     *
     * @since 1.2.0
     * @param array $options Plugin options.
     * @return true|WP_Error True if within limits, WP_Error if limit reached.
     */
    private static function check_rate_limits($options) {
        $user_id = get_current_user_id();
        
        // Monthly limit check
        $monthly_limit = $options['api_monthly_limit'] ?? 0;
        $current_monthly_usage = get_option('aca_ai_content_agent_api_usage_current_month', 0);
        
        if ($monthly_limit > 0 && $current_monthly_usage >= $monthly_limit) {
            return new WP_Error('monthly_limit_exceeded', __('The monthly API call limit has been reached.', 'aca-ai-content-agent'));
        }

        // Hourly limit check
        $hourly_limit = $options['api_hourly_limit'] ?? 60; // Default 60 calls per hour
        $current_hourly_usage = get_transient('aca_api_hourly_usage_' . $user_id) ?: 0;
        
        if ($current_hourly_usage >= $hourly_limit) {
            return new WP_Error('hourly_limit_exceeded', __('The hourly API call limit has been reached. Please try again later.', 'aca-ai-content-agent'));
        }

        // Per-minute limit check
        $minute_limit = $options['api_minute_limit'] ?? 10; // Default 10 calls per minute
        $current_minute_usage = get_transient('aca_api_minute_usage_' . $user_id) ?: 0;
        
        if ($current_minute_usage >= $minute_limit) {
            return new WP_Error('minute_limit_exceeded', __('Too many API calls in the last minute. Please wait before trying again.', 'aca-ai-content-agent'));
        }

        return true;
    }

    /**
     * Update all rate limiting counters after successful API call.
     *
     * @since 1.2.0
     */
    private static function update_rate_limit_counters() {
        $user_id = get_current_user_id();
        
        // Update monthly counter
        $current_monthly = get_option('aca_ai_content_agent_api_usage_current_month', 0);
        update_option('aca_ai_content_agent_api_usage_current_month', $current_monthly + 1);

        // Update hourly counter
        $current_hourly = get_transient('aca_api_hourly_usage_' . $user_id) ?: 0;
        set_transient('aca_api_hourly_usage_' . $user_id, $current_hourly + 1, HOUR_IN_SECONDS);

        // Update minute counter
        $current_minute = get_transient('aca_api_minute_usage_' . $user_id) ?: 0;
        set_transient('aca_api_minute_usage_' . $user_id, $current_minute + 1, MINUTE_IN_SECONDS);
    }

    /**
     * Extract keyword phrases from a given text using the Gemini API.
     *
     * @since 1.2.0
     * @param string $content The text content to analyze.
     * @return array|WP_Error An array of keyword phrases on success, or a WP_Error object on failure.
     */
    public static function extract_keywords_from_content( $content ) {
        $prompt = sprintf(
            /* translators: %s: The content to extract keywords from. */
            __( 'Extract the most important 5-10 SEO keyword phrases from the following text. Return them as a comma-separated list. Text: %s', 'aca-ai-content-agent' ),
            $content
        );

        $response = self::call( $prompt );

        if ( is_wp_error( $response ) ) {
            return $response;
        }

        $keywords = array_map( 'trim', explode( ',', $response ) );

        return $keywords;
    }

    /**
     * Test API connectivity with a simple request.
     *
     * @since 1.3.0
     * @return true|WP_Error True if connection successful, WP_Error on failure.
     */
    public static function test_api_connectivity() {
        if (defined('ACA_AI_CONTENT_AGENT_DEV_MODE') && ACA_AI_CONTENT_AGENT_DEV_MODE) {
            return true; // Always return true in dev mode
        }

        $api_key_encrypted = get_option('aca_ai_content_agent_gemini_api_key');
        if (empty($api_key_encrypted)) {
            return new WP_Error('no_api_key', __('No API key configured.', 'aca-ai-content-agent'));
        }

        $api_key = ACA_Encryption_Util::decrypt($api_key_encrypted);
        if (is_wp_error($api_key)) {
            return $api_key;
        }

        // Make a simple test call
        $test_response = self::call('Test connection - respond with "OK" if you can read this.');
        
        if (is_wp_error($test_response)) {
            return $test_response;
        }

        return true;
    }
}
